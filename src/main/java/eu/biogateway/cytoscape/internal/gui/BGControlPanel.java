package eu.biogateway.cytoscape.internal.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import eu.biogateway.cytoscape.internal.gui.conversion.BGImportExportController;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelComponent2;
import org.cytoscape.application.swing.CytoPanelName;
import eu.biogateway.cytoscape.internal.libs.JCheckBoxTree;
import eu.biogateway.cytoscape.internal.BGServiceManager;
import eu.biogateway.cytoscape.internal.util.Utility;


import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import java.awt.*;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

public class BGControlPanel extends JPanel implements CytoPanelComponent2 {

    private JPanel mainPanel;
    private JPanel treePanel;
    private JButton resetBioGatewayStyleButton;
    private JButton reloadMetadataButton;
    private JButton queryBuilderButton;
    private JButton convertNetworkButton;
    private JCheckBoxTree tree;


    public BGControlPanel() {
        this.add(mainPanel);

        setupTreePanel();
        setUpActions();
    }

    private void setSelectionForNode(DefaultMutableTreeNode node) {

    }


    public void setupTreePanel() {
        treePanel.removeAll();
        DefaultTreeModel model = BGServiceManager.INSTANCE.getCache().getConfigPanelTreeModel();
        tree = new JCheckBoxTree(model);
        //tree.expandRow(0);
        tree.setRootVisible(false);
        tree.setShowsRootHandles(true);

        tree.rightClickCallback = mouseEvent -> {
            TreePath tp = tree.getPathForLocation(mouseEvent.getX(), mouseEvent.getY());
            if (tp == null) {
                return;
            }
            int row = tree.getRowForPath(tp);
            String nodeName = tp.getLastPathComponent().toString();
            URI uri;
            try {
                uri = new URI(BGServiceManager.INSTANCE.getCache().getDatasetGraphs().get(nodeName));
            } catch (URISyntaxException e) {
                e.printStackTrace();
                return;
            }

            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem menuItem = new JMenuItem("Open " + nodeName + " graph description in browser.");

            menuItem.addActionListener(actionEvent -> {
                System.out.println("Right-clicked node with path: " + tp.toString());
                if (Desktop.isDesktopSupported()) {
                    try {
                        Desktop.getDesktop().browse(uri);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            });

            popupMenu.add(menuItem);

            tree.setSelectionRow(row);

            popupMenu.show(mouseEvent.getComponent(), mouseEvent.getX(), mouseEvent.getY());

        };

        treePanel.add(tree);

        tree.addCheckChangeEventListener(event -> BGServiceManager.INSTANCE.getDataModelController().setActiveNodesForPaths(tree.getCheckedPaths()));

        BGServiceManager.INSTANCE.getDataModelController().setSelectionFromPreferences(tree);

        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        TreePath path = new TreePath(root.getPath());
        tree.fireCheckChangeEvent(new JCheckBoxTree.CheckChangeEvent(path));
    }

    private void setUpActions() {
        resetBioGatewayStyleButton.addActionListener(e -> {
            Utility.INSTANCE.resetBioGatewayVisualStyle();
        });
        reloadMetadataButton.addActionListener(e -> {
            BGServiceManager.INSTANCE.getDataModelController().getNetworkBuilder().reloadMetadataForRelationsInCurrentNetwork();
        });
        queryBuilderButton.addActionListener(e -> {
            new BGQueryBuilderController();
        });
        convertNetworkButton.addActionListener(e -> {
            new BGImportExportController();
        });
    }

// CytoPanel implementations:

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }

    @Override
    public String getIdentifier() {
        return "biogatewayControlPanel";
    }

    @Override
    public String getTitle() {
        return "BioGateway";
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new BorderLayout(0, 0));
        mainPanel.add(panel1, BorderLayout.CENTER);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Active Properties"));
        treePanel = new JPanel();
        treePanel.setLayout(new BorderLayout(0, 0));
        panel1.add(treePanel, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, BorderLayout.SOUTH);
        resetBioGatewayStyleButton = new JButton();
        resetBioGatewayStyleButton.setText("Reset Layout Style");
        resetBioGatewayStyleButton.setToolTipText("Resets the BioGateway layout style to the default configuration encoded in the app.");
        panel2.add(resetBioGatewayStyleButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        reloadMetadataButton = new JButton();
        reloadMetadataButton.setText("Reload Metadata");
        panel2.add(reloadMetadataButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        queryBuilderButton = new JButton();
        queryBuilderButton.setText("Query Builder");
        panel2.add(queryBuilderButton, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        convertNetworkButton = new JButton();
        convertNetworkButton.setText("Convert Network");
        panel2.add(convertNetworkButton, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}