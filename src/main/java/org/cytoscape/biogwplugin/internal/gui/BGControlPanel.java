package org.cytoscape.biogwplugin.internal.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import javafx.scene.control.cell.CheckBoxTreeCell;
import org.cytoscape.application.swing.CytoPanelComponent;
import org.cytoscape.application.swing.CytoPanelName;
import org.cytoscape.biogwplugin.internal.BGServiceManager;
import org.scijava.swing.checkboxtree.CheckBoxNodeData;
import org.scijava.swing.checkboxtree.CheckBoxNodeEditor;


import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class BGControlPanel extends JPanel implements CytoPanelComponent {
    private BGServiceManager serviceManager;
    private JPanel mainPanel;
    private JComboBox comboBox1;
    private JCheckBox intActCheckBox;
    private JCheckBox TFTGCheckBox;
    private JCheckBox GOACheckBox;
    private JCheckBox refprotCheckBox;
    private JPanel treePanel;


    public BGControlPanel(BGServiceManager serviceManager) {
        this.serviceManager = serviceManager;

        serviceManager.setControlPanel(this);
        this.add(mainPanel);
        addActionListenerToGraphCheckbox(this.intActCheckBox, "intact");
        addActionListenerToGraphCheckbox(this.TFTGCheckBox, "tf-tg");
        addActionListenerToGraphCheckbox(this.GOACheckBox, "goa");
        addActionListenerToGraphCheckbox(this.refprotCheckBox, "refprot");
    }

    private void addActionListenerToGraphCheckbox(JCheckBox box, String graph) {
        box.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (box.isSelected()) {
                    serviceManager.getServer().addGraphFilter(graph);
                } else {
                    serviceManager.getServer().removeGraphFilter(graph);
                }
            }
        });
    }

// CytoPanel implementations:

    @Override
    public Component getComponent() {
        return this;
    }

    @Override
    public CytoPanelName getCytoPanelName() {
        return CytoPanelName.WEST;
    }

    @Override
    public String getTitle() {
        return "BioGateway";
    }

    @Override
    public Icon getIcon() {
        return null;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        mainPanel.add(panel1, BorderLayout.NORTH);
        panel1.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Taxon", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, new Color(-16777216)));
        final JLabel label1 = new JLabel();
        label1.setText("Default Taxon: ");
        panel1.add(label1);
        comboBox1 = new JComboBox();
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Homo Sapiens");
        defaultComboBoxModel1.addElement("Mus Musculus");
        defaultComboBoxModel1.addElement("Rattus Norwegicus");
        comboBox1.setModel(defaultComboBoxModel1);
        panel1.add(comboBox1);
        treePanel = new JPanel();
        treePanel.setLayout(new BorderLayout(0, 0));
        mainPanel.add(treePanel, BorderLayout.SOUTH);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(4, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel2, BorderLayout.CENTER);
        panel2.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEtchedBorder(), "Active Graphs"));
        intActCheckBox = new JCheckBox();
        intActCheckBox.setText("IntAct");
        panel2.add(intActCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        TFTGCheckBox = new JCheckBox();
        TFTGCheckBox.setText("TF-TG");
        panel2.add(TFTGCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        GOACheckBox = new JCheckBox();
        GOACheckBox.setText("GOA");
        panel2.add(GOACheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        refprotCheckBox = new JCheckBox();
        refprotCheckBox.setText("Refprot");
        panel2.add(refprotCheckBox, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}